{"version":3,"file":"main.ed44e10f89d7232db199.bundle.js","sources":["webpack:///./components/Input/Input.tsx"],"sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport omit from 'omit.js';\n\ninterface InputProps {\n  suffix: any; // 后缀图标\n}\n\ninterface InputInterface {\n  value?: string;\n  event?: React.KeyboardEvent<HTMLInputElement>;\n}\n\nexport default class Input extends React.Component<InputProps & any, any> {\n  static propTypes = {\n    /**\n     * 类型\n     * 默认：'text'\n     */\n    type: PropTypes.string,\n    /**\n     * 是否禁用\n     * 默认：false\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * 后缀\n     * 默认：-\n     */\n    suffix: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  };\n\n  static defaultProps = {\n    type: 'text',\n    disabled: false,\n  };\n\n  private input: InputInterface;\n\n  constructor(props) {\n    super(props);\n    this.input = {};\n    this.input.value = props.value || '';\n  }\n\n  handleKeyDown = e => {\n    const { onPressEnter, onKeyDown } = this.props;\n    if (e.keyCode === 13 && onPressEnter) {\n      onPressEnter(e);\n    }\n    if (onKeyDown) {\n      onKeyDown(e);\n    }\n  };\n\n  handleChange = e => {\n    this.input.event = e;\n    this.input.value = e.target.value;\n    this.props.onChange && this.props.onChange(e);\n  };\n\n  renderInput = (props, hasSuffix) => {\n    const { className, onChange, ...restProps } = props;\n    const classes = classNames(\n      'ic-input',\n      {\n        ['ic-input--has-suffix']: hasSuffix,\n      },\n      className\n    );\n    return <input className={classes} onChange={this.handleChange} {...restProps} onKeyDown={this.handleKeyDown} />;\n  };\n\n  render() {\n    const { suffix, style, className } = this.props;\n    const otherProps = omit(this.props, ['onPressEnter', 'suffix', 'style']);\n\n    if (suffix) {\n      const classes = classNames('ic-input-wrap', className);\n      return (\n        <div className={classes}>\n          {this.renderInput(otherProps, true)}\n          {suffix}\n        </div>\n      );\n    }\n\n    return this.renderInput({ style, className, ...otherProps }, false);\n  }\n}\n"],"mappings":"AAcA","sourceRoot":""}